
import alf.algorithms.sarsa_algorithm
import alf.trainers.on_policy_trainer

# environment config
import alf.environments.wrappers
RandomFirstEpisodeLength.random_length_range=200
suite_gym.load.env_wrappers=(@RandomFirstEpisodeLength, )
create_environment.env_name="Pendulum-v0"
create_environment.num_parallel_environments=128

# algorithm config
observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

# Uncomment the following block for SAC style training
# Setting for SAC style training
# actor/NormalProjectionNetwork.state_dependent_std=True
# actor/NormalProjectionNetwork.mean_transform=None
# actor/NormalProjectionNetwork.scale_distribution=True
# actor/NormalProjectionNetwork.std_transform=@clipped_exp
# actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
# actor/ActorDistributionNetwork.output_tensor_spec=%action_spec
# actor/ActorDistributionNetwork.fc_layer_params=(100, 100)
# actor/ActorDistributionNetwork.continuous_projection_net=@actor/NormalProjectionNetwork
# SarsaAlgorithm.actor_network=@actor/ActorDistributionNetwork()
# EntropyTargetAlgorithm.average_window=100
# EntropyTargetAlgorithm.max_entropy=-3
# Agent.enforce_entropy_target=True

# Uncomment the following block for DDPG style training
# Settings for DDPG style training
actor/ActorNetwork.input_tensor_spec=%observation_spec
actor/ActorNetwork.output_tensor_spec=%action_spec
actor/ActorNetwork.fc_layer_params=(100, 100)
SarsaAlgorithm.actor_network=@actor/ActorNetwork()

actor/Adam.learning_rate=1e-4

critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100, 100)
critic/Adam.learning_rate=1e-3

SarsaAlgorithm.critic_network=@critic/CriticNetwork()
SarsaAlgorithm.actor_optimizer=@actor/Adam()
SarsaAlgorithm.critic_optimizer=@critic/Adam()
SarsaAlgorithm.target_update_tau=0.01
SarsaAlgorithm.target_update_period=5

Agent.action_spec = %action_spec
Agent.rl_algorithm_cls=@SarsaAlgorithm

# training config
TrainerConfig.trainer=@on_policy_trainer
TrainerConfig.unroll_length=1
TrainerConfig.algorithm_ctor=@Agent
TrainerConfig.num_iterations=20000
TrainerConfig.checkpoint_interval=10000
TrainerConfig.evaluate=1
TrainerConfig.eval_interval=1000
TrainerConfig.debug_summaries=1
TrainerConfig.summarize_grads_and_vars=1
TrainerConfig.summary_interval=100
TrainerConfig.use_tf_functions=1

# Uncomment the following block for off-policy training.
# It is more sample efficient than on-policy training
SarsaAlgorithm.target_update_tau=0.05
create_environment.num_parallel_environments=1
import alf.trainers.off_policy_trainer
TrainerConfig.trainer=@sync_off_policy_trainer
TrainerConfig.initial_collect_steps=1000
TrainerConfig.mini_batch_length=1
TrainerConfig.mini_batch_size=128
TrainerConfig.num_updates_per_train_iter=1
TrainerConfig.clear_replay_buffer=False
TrainerConfig.use_rollout_state=True
TrainerConfig.replay_buffer_length=100000
