
import alf.algorithms.sac_algorithm
import alf.trainers.off_policy_trainer
import alf.utils.common

# environment config
NUM_PARALLEL_ENVIRONMENTS=1
create_environment.env_name="Pendulum-v0"
create_environment.num_parallel_environments=%NUM_PARALLEL_ENVIRONMENTS

# algorithm config
create_sac_algorithm.actor_fc_layers=(100, 100)
create_sac_algorithm.critic_fc_layers=(100, 100)
create_sac_algorithm.actor_learning_rate=1e-3
create_sac_algorithm.critic_learning_rate=1e-3
create_sac_algorithm.alpha_learning_rate=1e-3
SacAlgorithm.target_update_tau=0.005
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_squared_loss

ActorDistributionNetwork.continuous_projection_net=@NormalProjectionNetwork
NormalProjectionNetwork.state_dependent_std=True
NormalProjectionNetwork.mean_transform=None
NormalProjectionNetwork.scale_distribution=True
NormalProjectionNetwork.std_transform=@common.std_clip_transform

# training config
OffPolicyTrainer.initial_collect_steps=1000
OffPolicyTrainer.mini_batch_length=2
OffPolicyTrainer.unroll_length=1
OffPolicyTrainer.mini_batch_size=64
OffPolicyTrainer.num_updates_per_train_step=1
OffPolicyTrainer.clear_replay_buffer=False
Trainer.algorithm_ctor=@create_sac_algorithm
Trainer.num_iterations=20000
Trainer.checkpoint_interval=10000
Trainer.evaluate=1
Trainer.eval_interval=1000
Trainer.debug_summaries=1
Trainer.summarize_grads_and_vars=0
Trainer.summary_interval=100

TFUniformReplayBuffer.max_length=100000

train_eval.trainer_cls=@SyncOffPolicyTrainer