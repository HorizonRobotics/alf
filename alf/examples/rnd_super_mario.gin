# rnd on SuperMario

import alf.algorithms.actor_critic_algorithm
import alf.trainers.on_policy_trainer
import alf.algorithms.rnd_algorithm

import alf.environments.suite_mario

# environment config
# gym-retro>=0.7.0 is required for this experiment and also
#  a suitable `SuperMarioBros-Nes` rom should be obtain and imported (roms are not included in gym-retro)
#   see `https://retro.readthedocs.io/en/latest/getting_started.html#importing-roms` to import roms
create_environment.env_load_fn=@suite_mario.load
create_environment.env_name="SuperMarioBros-Nes"
create_environment.num_parallel_environments=30
suite_mario.load.state="Level1-1"

# algorithm config
observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

CONV_LAYER_PARAMS=[(32,8,4),(64,4,2),(64,3,1)]

actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
actor/ActorDistributionNetwork.output_tensor_spec=%action_spec
actor/ActorDistributionNetwork.fc_layer_params=(256,)
actor/ActorDistributionNetwork.activation_fn=@tf.nn.elu
actor/ActorDistributionNetwork.conv_layer_params=%CONV_LAYER_PARAMS
CategoricalProjectionNetwork.logits_init_output_factor=1e-10
actor/ActorDistributionNetwork.discrete_projection_net=@CategoricalProjectionNetwork


value/ValueNetwork.input_tensor_spec=%observation_spec
value/ValueNetwork.fc_layer_params=(256,256)
value/ValueNetwork.conv_layer_params=%CONV_LAYER_PARAMS
value/ValueNetwork.activation_fn=@tf.nn.elu

ac/Adam.learning_rate=3e-5

rnd/tf.TensorSpec.shape=(84, 84, 1)
rnd/EncodingNetwork.input_tensor_spec=@rnd/tf.TensorSpec()
rnd/EncodingNetwork.conv_layer_params=%CONV_LAYER_PARAMS
rnd/EncodingNetwork.fc_layer_params=(256, 256, 128)
rnd/EncodingNetwork.activation_fn=@tf.nn.elu

RNDAlgorithm.target_net=@rnd/EncodingNetwork()
RNDAlgorithm.predictor_net=@rnd/EncodingNetwork()
RNDAlgorithm.reward_adapt_speed=8.0

ActorCriticAlgorithm.actor_network=@actor/ActorDistributionNetwork()
ActorCriticAlgorithm.value_network=@value/ValueNetwork()
Agent.optimizer=@ac/Adam()
Agent.intrinsic_reward_module=@RNDAlgorithm()
Agent.extrinsic_reward_coef=0.0
ActorCriticLoss.entropy_regularization=0.01
Agent.gradient_clipping=10.0
ActorCriticLoss.use_gae=True
ActorCriticLoss.use_td_lambda_return=True

tf.keras.layers.Conv2D.padding="same"

# training config
TrainerConfig.unroll_length=32
TrainerConfig.algorithm_ctor=@Agent
TrainerConfig.num_iterations=10000000
TrainerConfig.use_tf_functions=True
TrainerConfig.debug_summaries=True
TrainerConfig.summarize_grads_and_vars=False
TrainerConfig.summary_interval=10

TrainerConfig.data_transformer_ctor=@ImageScaleTransformer

TrainerConfig.trainer=@on_policy_trainer
